take 0 xs <- []
take n [] <- []
take n [x : xs] <- [x : take (n - 1) xs]

drop 0 xs <- xs
drop n [] <- []
drop n [x : xs] <- drop (n - 1) xs

half-length xs <- ceiling ((length xs) / 2)

left  xs <- take (half-length xs) xs
right xs <- take (half-length xs) (drop (half-length xs) xs)

; Merge sort algorithm
merge-sort []  cmp? <- []
merge-sort [x] cmp? <- [x]
merge-sort xs  cmp? <-
    merge [] rs <- rs
    merge ls [] <- ls
    merge [l : ls] [r : rs] <-
        if | cmp? r l -> [r : merge [l : ls] rs]
           |          -> [l : merge ls [r : rs]]

    merge (merge-sort (left xs) cmp?) (merge-sort (right xs) cmp?)
